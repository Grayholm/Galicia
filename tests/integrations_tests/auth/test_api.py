import pytest@pytest.mark.parametrize(    "first_name, last_name, nickname, birth_day, email, password, status_code",    [        ("John", "Doe", "unknownjohn", "1993-02-15", "johndoe@gmail.com", "zalusdpa", 200),        ("", "", "unknownjohn", "1993-02-15", "john1doe@gmail.com", "zaluasdpa", 200),        ("", "", "dasdas", "1993-02-15", "john1doe@gmail.com", "zaluasdpa", 409),        ("", "", "", "1993-02-15", "john2doe@gmail.com", "zalasdupa", 400),        ("Alex", "Doe", "unknownalex", "1993-02-15", "alexdoe@gmail.com", "adsd", 400),        ("Alex", "Doe", "unknownalex", "1993-02-15", "alexdoe1@gmail.com", "", 400),        ("Alex", "Doe", "unknownalex", "1993-02-15", "alexdoe1", "dfhgsdfg", 400),    ],)async def test_register_user(    first_name, last_name, nickname, birth_day, email, password, status_code, ac, db):    response = await ac.post(        "/auth/register",        json={            "first_name": first_name,            "last_name": last_name,            "nickname": nickname,            "birth_day": birth_day,            "email": email,            "password": password,        },    )    assert response.status_code == status_code@pytest.mark.parametrize(    "email, password, status_code",    [        ("johndoe@gmail.com", "zalusdpa", 200),        ("johndoe2@gmail.com", "zalusdpa", 401),        ("johndoe@gmail.com", "dfsglksga", 401),        ("johndoe@gmail", "zalusdpa", 401),        ("", "zalusdpa", 401),    ],)async def test_login_user(    email,    password,    status_code,    ac,    db,):    response = await ac.post(        "/auth/login",        json={            "email": email,            "password": password,        },    )    assert response.status_code == status_code    if status_code == 200:        payload = response.json()        assert "access_token" in payload        token = payload["access_token"]        assert token != ""  # не пустой        assert ac.cookies["access_token"] == tokenasync def test_get_me(ac, db):    response = await ac.get(        "/auth/me",    )    assert response.status_code == 200    assert "email" in response.json()    assert "id" in response.json()    assert "password" not in response.json()    assert "hashed_password" not in response.json()async def test_logout(ac, db):    response = await ac.post(        "/auth/logout",    )    assert response.status_code == 200async def test_get_me_again(ac, db):    response = await ac.get(        "/auth/me",    )    assert response.status_code == 401